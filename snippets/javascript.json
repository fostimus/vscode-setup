{
  // Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "React Functional Component": {
    "prefix": "rfc",
    "body": "import React from 'react'\n\nexport default function ${1:Name} () {\n\t\treturn (\n\t\t\t$2\n\t\t)\n\t}"
  },
  "React Component": {
    "prefix": "recom",
    "body": "class ${1:Name} extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t$2\n\t\t)\n\t}\n}"
  },
  "React Constructor": {
    "prefix": "reconst",
    "body": "constructor () {\n\tsuper()\n\tthis.state = {\n\t\t$1\n\t}\n}\n"
  },
  "this.setState": {
    "prefix": "setst",
    "body": "this.setState({$1})"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount () {\n\t$1\n}\n"
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "componentWillMount () {\n\t$1\n}\n"
  },
  "componentWillUnmount": {
    "prefix": "cwu",
    "body": "componentWillUnmount () {\n\t$1\n}\n"
  },
  "componentWillReceiveProps": {
    "prefix": "cwrp",
    "body": "componentWillReceiveProps (nextProps) {\n\t$1\n}\n"
  },
  "Anon Function": {
    "prefix": "fn",
    "body": "($1) => {\n\t$2\n}"
  },
  "Anon inline Function": {
    "prefix": "fni",
    "body": "($1) => $2"
  },
  "Oldstyle function": {
    "prefix": "fun",
    "body": "function ${1:funcName} ($2) {\n\t$3\n}"
  },
  "Oldstyle Anon function": {
    "prefix": "funa",
    "body": "function ($1) {\n\t$2\n}"
  },
  "Class function": {
    "prefix": "func",
    "body": "${1:funcName} ($2) {\n\t$3\n}"
  },
  "cssGapWithoutGap": {
    "prefix": "gwog",
    "body": "$1:first-child {\n\tpadding-right: PADDING_X}"
  },
  "justifyContent center": {
    "prefix": "jcc",
    "body": "justifyContent: 'center',"
  },
  "justifyContent start": {
    "prefix": "jcs",
    "body": "justifyContent: 'flex-start',"
  },
  "justifyContent end": {
    "prefix": "jce",
    "body": "justifyContent: 'flex-end',"
  },
  "justifyContent between": {
    "prefix": "jcb",
    "body": "justifyContent: 'space-between',"
  },
  "justifyContent evenly": {
    "prefix": "jcev",
    "body": "justifyContent: 'space-evenly',"
  },
  "justifyContent around": {
    "prefix": "jca",
    "body": "justifyContent: 'space-around',"
  },
  "alignItems center": {
    "prefix": "aic",
    "body": "alignItems: 'center',"
  },
  "alignItems start": {
    "prefix": "ais",
    "body": "alignItems: 'flex-start',"
  },
  "alignItems end": {
    "prefix": "aie",
    "body": "alignItems: 'flex-end',"
  },
  "flexWrap wrap": {
    "prefix": "fw",
    "body": "flexWrap: 'wrap',"
  },
  "flex 1": {
    "prefix": "f1",
    "body": "flex: 1,"
  },
  "flexDirection column": {
    "prefix": "fdc",
    "body": "flexDirection: ['column'],"
  },
  "reflexbox Box": {
    "prefix": "box",
    "body": "const ${1:name} = styled(Box).attrs({\n\twidth: [1],\n})``"
  },
  "reflexbox Flex": {
    "prefix": "flexbox",
    "body": "const ${1:name} = styled(Flex).attrs({\n\tjustifyContent: 'center',\n\talignItems: 'center',\n})``"
  },
  "font-weight bold": {
    "prefix": "fwb",
    "body": "font-weight: ${theme.fontWeights.bold};"
  },
  "font-weight black": {
    "prefix": "fwbb",
    "body": "font-weight: ${theme.fontWeights.black};"
  },
  "import from components": {
    "prefix": "impc",
    "body": "import $1 from 'components/$1'"
  },
  "Import statement": {
    "prefix": "imp",
    "body": "import $1 from '$2'"
  },
  "Import lodash statement": {
    "prefix": "impl",
    "body": "import $1 from 'lodash/$1'"
  },
  "Import member": {
    "prefix": "impm",
    "body": "import { $1 } from '$2'"
  },
  "import react": {
    "prefix": "impr",
    "body": "import React from 'react'"
  },
  "import styled components": {
    "prefix": "impsc",
    "body": "import styled from 'styled-components'"
  },
  "import media": {
    "prefix": "impmed",
    "body": "import media from 'media'"
  },
  "import theme": {
    "prefix": "impth",
    "body": "import theme from 'theme'"
  },
  "import prop-types": {
    "prefix": "imppt",
    "body": "import PropTypes from 'prop-types'"
  },
  "Log": {
    "prefix": "log",
    "body": "console.log(${1})"
  },
  "Error": {
    "prefix": "error",
    "body": "console.error(${1})"
  },
  "for in (obj)": {
    "prefix": "forin",
    "body": "for (const ${1:variable} in ${2:object}) {\n\t$3\n}"
  },
  "for of (arr)": {
    "prefix": "forof",
    "body": "for (const ${1:variable} of ${2:iterable}) {\n\t$3\n}"
  }
}
